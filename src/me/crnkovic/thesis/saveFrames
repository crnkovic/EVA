@FXML
	public void saveCurrentFrame(ActionEvent actionEvent) {
		Label oznaka = new Label("Želite li spremiti označene okvire:");
		ToggleGroup oznOkviri = new ToggleGroup();
		RadioButton btnDa = new RadioButton("Da");
		btnDa.setToggleGroup(oznOkviri);
		RadioButton btnNe = new RadioButton("Ne");
		btnNe.setToggleGroup(oznOkviri);

		Label spremanje = new Label("Koliko okvira želite spremiti:");
		ToggleGroup sviOkviri = new ToggleGroup();
		RadioButton sve = new RadioButton("Sve");
		RadioButton neke = new RadioButton("Neke");
		sve.setToggleGroup(sviOkviri);
		neke.setToggleGroup(sviOkviri);

		TextField upisi = new TextField();
		upisi.setPromptText("Ovdje unesite brojeve okvira koje želite spremiti");
		upisi.setDisable(true);

		neke.setOnAction(event -> upisi.setDisable(false));
		sve.setOnAction(event -> upisi.setDisable(true));

		Button spremi = new Button("Spremi");

		spremi.setOnAction(event -> {
			int numberOfFrames = 0;
			try {
				numberOfFrames = VideoUtil.getNumberOfFrames(evaluationMainApp.getVideoPath());
			} catch (Exception e) {
				e.printStackTrace();
			}
			if (btnNe.isSelected()) {
				if (sve.isSelected()) {
					DirectoryChooser directoryChooser = new DirectoryChooser();
					directoryChooser.setTitle("Spremi neoznačene okvire");
					File directory = directoryChooser.showDialog(scene.getWindow());

					for (int i = 0; i < numberOfFrames; ++i) {
						BufferedImage fieldImage = null;

						try {
							fieldImage = VideoUtil.getFrame(evaluationMainApp.getVideoPath(), i);
						} catch (IOException | JCodecException e) {
							e.printStackTrace();
						}

						File frameFile = directory.toPath().resolve("okvir" + i + ".png").toFile();

						try {
							ImageIO.write(fieldImage, "png", frameFile);
						} catch (IOException e) {
							e.printStackTrace();
						}
					}

					if (neke.isSelected()) {
						if (upisi.getText() == null || upisi.getText().trim().isEmpty()) {
							Message.warning("Neispravan unos", "Nije unesen niti jedan broj okvira. Unos treba biti " +
									"oblika: 1, 5, 74, 89, ...");
						} else if (upisi.getText().matches(".*[a-zA-Z]+.*")) {
							Message.warning("Neispravan unos", "Unos slova nije dopušten. Unos treba biti oblika: 1," +
									" " +
									"5, 74, 89, ...");
						} else {
							String[] brojeviOkvira = upisi.getText().split(",");
							int[] okviri = null;
							int i = 0;
							int disableOpen = 0;

							for (String okvir : brojeviOkvira) {
								okvir = okvir.trim();
								okviri[i] = Integer.parseInt(brojeviOkvira[i]);

								if (numberOfFrames < okviri[i] || okviri[i] < 0) {
									Message.warning("Izvan raspona", "Broj ili neki od brojeva su veći od ukupnog " +
											"broja okvira ili su manji od 0.");
									disableOpen = 1;
									break;
								}
								i++;
							}
							if (disableOpen == 0) {
								DirectoryChooser directChooser = new DirectoryChooser();
								directChooser.setTitle("Spremi neoznačene okvire");
								File direct = directoryChooser.showDialog(scene.getWindow());
								for (int mjesto : okviri) {
									BufferedImage fieldImage = null;
									try {
										fieldImage = VideoUtil.getFrame(evaluationMainApp.getVideoPath(), mjesto);
									} catch (IOException | JCodecException e) {
										e.printStackTrace();
									}
									File frameFile = direct.toPath().resolve("okvir" + i + ".png").toFile();
									try {
										ImageIO.write(fieldImage, "png", frameFile);
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							}
						}
					}
				} else {
					DirectoryChooser directoryChooser = new DirectoryChooser();
					directoryChooser.setTitle("Spremi označene okvire");
					File file = directoryChooser.showDialog(scene.getWindow());
					if (sve.isSelected()) {
						for (int frameNumber : evaluationMainApp.getMarkedFrames().keySet()) {
							BufferedImage image = null;
							try {
								image = VideoUtil.getFrame(evaluationMainApp.getVideoPath(), frameNumber);
							} catch (IOException | JCodecException e) {
								e.printStackTrace();
							}
							Graphics graph = image.createGraphics();
							file = file.toPath().resolve("O" + frameNumber + ".jpg").toFile();
							for (javafx.scene.shape.Rectangle rec : evaluationMainApp.getMarkedFrame(frameNumber)) {
								graph.setColor(Color.RED);
//								graph.drawRect(rec.getxCoordinate(), rec.getyCoordinate(), rec.getHeight(), rec
//										.getWidth());
							}
							try {
								ImageIO.write(image, "png", file);
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
					} else {
						if (upisi.getText() == null || upisi.getText().trim().isEmpty()) {
							Message.warning("Neispravan unos", "Nije unesen niti jedan broj okvira. Unos treba biti" +
									" " +
									"oblika: 1, 5, 74, 89, ...");
						} else if (upisi.getText().matches(".*[a-zA-Z]+.*")) {
							Message.warning("Neispravan unos", "Unos slova nije dopušten. Unos treba biti oblika: " +
									"1," +
									" " +
									"5, 74, 89, ...");
						}
						String[] okviri = upisi.getText().split(",");
						int[] brojeviOkvira = null;
						int i = 0;
						int postoji = 0;
						List<Integer> lista = new ArrayList<>();
						for (String okvir : okviri) {
							okvir = okvir.trim();
							brojeviOkvira[i] = Integer.parseInt(okvir);
							if (evaluationMainApp.getMarkedFrames().keySet().contains(brojeviOkvira[i])) {
								lista.add(brojeviOkvira[i]);
								postoji = 1;
							}
							i++;
						}
						if (postoji == 1) {
							String s = null;
							for (int j = 0; i < lista.size(); j++) {
								s = s + lista.get(j) + "\t";
							}
							Message.warning("Krivi upis", "Okviri koji su navedeni, a još nisu označeni (ili su " +
									"manji" +
									" od 0) su: " + s);
						}
						for (int broj : brojeviOkvira) {
							if (postoji == 1) {
								break;
							}
							BufferedImage image = null;
							try {
								image = VideoUtil.getFrame(evaluationMainApp.getVideoPath(), broj);
							} catch (IOException | JCodecException e) {
								e.printStackTrace();
							}
							Graphics graph = image.createGraphics();
							file = file.toPath().resolve("O" + broj + ".jpg").toFile();
							for (javafx.scene.shape.Rectangle rec : evaluationMainApp.getMarkedFrame(broj)) {
								graph.setColor(Color.RED);
//								graph.drawRect(rec.getxCoordinate(), rec.getyCoordinate(), rec.getHeight(), rec
//										.getWidth());
							}
							try {
								ImageIO.write(image, "png", file);
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
					}
				}
			}
		});

		BorderPane pane = new BorderPane();
		pane.setPadding(new Insets(20, 20, 20, 20));

		FlowPane pane2 = new FlowPane();
		pane2.setVgap(100);
		pane2.setHgap(30);
		pane2.getChildren().addAll(oznaka, btnDa, btnNe);

		pane.setTop(pane2);

		BorderPane pane3 = new BorderPane();
		pane3.setPadding(new Insets(50, 0, 50, 0));
		pane.setCenter(pane3);

		FlowPane pane4 = new FlowPane();
		pane4.setVgap(100);
		pane4.setHgap(50);
		pane4.getChildren().addAll(spremanje, sve, neke);

		pane3.setTop(pane4);
		pane3.setBottom(upisi);

		BorderPane pane5 = new BorderPane();
		pane5.setRight(spremi);
		pane.setBottom(pane5);

		Scene secondScene = new Scene(pane, 700, 250);

		Stage secondStage = new Stage();
		secondStage.initModality(Modality.APPLICATION_MODAL);
		secondStage.setTitle("Spremanje okvira");
		secondStage.setScene(secondScene);

		secondStage.show();
	}